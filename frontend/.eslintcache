[{"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/index.js":"1","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/store/store.js":"2","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/session_api_util.js":"3","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/root.js":"4","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/actions/session_actions.js":"5","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/app.js":"6","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/root_reducer.js":"7","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/route_util.js":"8","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/ScrollToTop.js":"9","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/session_reducer.js":"10","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/errors_reducer.js":"11","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/entities_reducer.js":"12","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/nav/navbar_container.js":"13","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/main/main_page.js":"14","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/bulletin_board/bulletin_board_container.js":"15","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/question_show_container.js":"16","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/resolved/resolved_show_container.js":"17","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/session/login_form_container.js":"18","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/session/signup_form_container.js":"19","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/profile/profile_container.js":"20","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/chatroom/room_container.js":"21","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/chatroom/room.js":"22","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/questions_errors_reducer.js":"23","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/session_errors_reducer.js":"24","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/questions_reducer.js":"25","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/responses_errors_reducer.js":"26","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/profile_reducer.js":"27","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/responses_reducer.js":"28","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/user_reducer.js":"29","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/messages_reducer.js":"30","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/actions/questions_actions.js":"31","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/bulletin_board/bulletin_board.js":"32","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/question_show.js":"33","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/session/login_form.js":"34","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/session/signup_form.js":"35","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/resolved/resolved_show.js":"36","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/profile/profile.js":"37","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/nav/navbar.js":"38","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/actions/responses_actions.js":"39","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/actions/messages_actions.js":"40","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/questions_api_util.js":"41","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/question_index.js":"42","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/create_question_form_container.js":"43","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/resolved/resolved_index.js":"44","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/update_question_form_container.js":"45","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/chatroom/create_room.js":"46","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_index_container.js":"47","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_index_item_container.js":"48","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/create_answers_form_container.js":"49","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/messenger/messenger_container.js":"50","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/responses_api_util.js":"51","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/messages_api_util.js":"52","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/question_form.js":"53","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/messenger/messenger.js":"54","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_index.js":"55","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_index_item.js":"56","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_form.js":"57"},{"size":1259,"mtime":1611209698295,"results":"58","hashOfConfig":"59"},{"size":930,"mtime":1610583341150,"results":"60","hashOfConfig":"59"},{"size":574,"mtime":1611185693935,"results":"61","hashOfConfig":"59"},{"size":286,"mtime":1609216554960,"results":"62","hashOfConfig":"59"},{"size":1980,"mtime":1611381470520,"results":"63","hashOfConfig":"59"},{"size":1519,"mtime":1611381470520,"results":"64","hashOfConfig":"59"},{"size":273,"mtime":1611381470530,"results":"65","hashOfConfig":"59"},{"size":1232,"mtime":1611381470530,"results":"66","hashOfConfig":"59"},{"size":258,"mtime":1611381470520,"results":"67","hashOfConfig":"59"},{"size":887,"mtime":1611381470530,"results":"68","hashOfConfig":"59"},{"size":383,"mtime":1610583341150,"results":"69","hashOfConfig":"59"},{"size":481,"mtime":1611185693925,"results":"70","hashOfConfig":"59"},{"size":511,"mtime":1611185693925,"results":"71","hashOfConfig":"59"},{"size":9129,"mtime":1611209661545,"results":"72","hashOfConfig":"59"},{"size":480,"mtime":1611185693925,"results":"73","hashOfConfig":"59"},{"size":1019,"mtime":1610583341150,"results":"74","hashOfConfig":"59"},{"size":877,"mtime":1610583341150,"results":"75","hashOfConfig":"59"},{"size":513,"mtime":1610583341150,"results":"76","hashOfConfig":"59"},{"size":623,"mtime":1610583341150,"results":"77","hashOfConfig":"59"},{"size":611,"mtime":1611381470520,"results":"78","hashOfConfig":"59"},{"size":211,"mtime":1610583341150,"results":"79","hashOfConfig":"59"},{"size":15624,"mtime":1611289382750,"results":"80","hashOfConfig":"59"},{"size":354,"mtime":1610583341150,"results":"81","hashOfConfig":"59"},{"size":487,"mtime":1610583341150,"results":"82","hashOfConfig":"59"},{"size":888,"mtime":1611185693925,"results":"83","hashOfConfig":"59"},{"size":354,"mtime":1610583341150,"results":"84","hashOfConfig":"59"},{"size":297,"mtime":1610583341150,"results":"85","hashOfConfig":"59"},{"size":565,"mtime":1610583341150,"results":"86","hashOfConfig":"59"},{"size":658,"mtime":1611381470530,"results":"87","hashOfConfig":"59"},{"size":770,"mtime":1611185693925,"results":"88","hashOfConfig":"59"},{"size":3119,"mtime":1611185693925,"results":"89","hashOfConfig":"59"},{"size":8574,"mtime":1611381470520,"results":"90","hashOfConfig":"59"},{"size":7012,"mtime":1611535424490,"results":"91","hashOfConfig":"59"},{"size":3484,"mtime":1611532486900,"results":"92","hashOfConfig":"59"},{"size":7242,"mtime":1611533142000,"results":"93","hashOfConfig":"59"},{"size":2014,"mtime":1611381932190,"results":"94","hashOfConfig":"59"},{"size":5671,"mtime":1611529503140,"results":"95","hashOfConfig":"59"},{"size":12974,"mtime":1611533329270,"results":"96","hashOfConfig":"59"},{"size":1155,"mtime":1610583341150,"results":"97","hashOfConfig":"59"},{"size":1352,"mtime":1611185693915,"results":"98","hashOfConfig":"59"},{"size":696,"mtime":1610583341150,"results":"99","hashOfConfig":"59"},{"size":2617,"mtime":1611209661545,"results":"100","hashOfConfig":"59"},{"size":654,"mtime":1611209661545,"results":"101","hashOfConfig":"59"},{"size":2484,"mtime":1611209661545,"results":"102","hashOfConfig":"59"},{"size":1111,"mtime":1610583341150,"results":"103","hashOfConfig":"59"},{"size":500,"mtime":1611381470520,"results":"104","hashOfConfig":"59"},{"size":828,"mtime":1611381470520,"results":"105","hashOfConfig":"59"},{"size":551,"mtime":1610583341150,"results":"106","hashOfConfig":"59"},{"size":919,"mtime":1611381470520,"results":"107","hashOfConfig":"59"},{"size":604,"mtime":1611381470520,"results":"108","hashOfConfig":"59"},{"size":813,"mtime":1610583341150,"results":"109","hashOfConfig":"59"},{"size":481,"mtime":1611185693935,"results":"110","hashOfConfig":"59"},{"size":5953,"mtime":1611381470520,"results":"111","hashOfConfig":"59"},{"size":5940,"mtime":1611533329270,"results":"112","hashOfConfig":"59"},{"size":1588,"mtime":1611381470520,"results":"113","hashOfConfig":"59"},{"size":1625,"mtime":1611185693925,"results":"114","hashOfConfig":"59"},{"size":4559,"mtime":1611529503140,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1void2r",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"118"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"118"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"118"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"118"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"118"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"118"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"118"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"240"},"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/index.js",[],["241","242"],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/store/store.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/session_api_util.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/root.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/actions/session_actions.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/app.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/root_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/route_util.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/ScrollToTop.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/session_reducer.js",["243"],"import { RECEIVE_CURRENT_USER, RECEIVE_USER_LOGOUT, RECEIVE_USER_SIGN_IN} from '../actions/session_actions'\n\nconst initialState = { isAuthenticated: false, user: {} };\n\nexport default function(state = initialState, action) {\n\n    switch (action.type) {\n        case RECEIVE_CURRENT_USER:\n            return { \n                ...state,\n                isAuthenticated: !!action.currentUser,\n                user: action.currentUser\n            };\n            \n        case RECEIVE_USER_SIGN_IN:\n            return { \n                ...state,\n                isSignedIn: true, \n                isAuthenticated: !!action.currentUser,\n                user: action.currentUser,\n            }\n\n        case RECEIVE_USER_LOGOUT:\n            return {\n            isAuthenticated: false,\n            user: undefined\n            };\n\n        default:\n            return state;\n\n        \n    }\n\n}\n","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/errors_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/entities_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/nav/navbar_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/main/main_page.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/bulletin_board/bulletin_board_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/question_show_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/resolved/resolved_show_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/session/login_form_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/session/signup_form_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/profile/profile_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/chatroom/room_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/chatroom/room.js",["244","245","246","247","248","249","250","251"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport '../../assets/stylesheets/reset.css';\nimport '../../assets/stylesheets/room.scss';\n\n\n\nconst Room = (props) => {\n\n\n    //!TEST\n        let [peers, setPeers] = useState([]);\n        const [mute, setMute] = useState('Mute');\n        const [video, setVideo] = useState('Video Off');\n        const[trigger, setOn] = useState('off');\n    //!TEST\n        // const [test, setTest] = useState(0);\n\n\n    //!TEST\n        \n        \n    // const [mute, setMute] = useState('Mute'); \n    // const [video, setVideo] = useState('Video Off');\n\n    const userVideo = useRef(); //for video html\n    const partnerVideo = useRef(); //for video html\n    const peerRef = useRef(); //rtc peerConnection\n    const socketRef = useRef();\n    const otherUser = useRef(); //otherUser - generated ID\n    const userStream = useRef();\n    // const setPeers = useRef();\n    \n\n    // 1/1/21 test\n    const otherVideos = useRef(new Array());\n    const otherUsers = useRef(new Array()); \n    // const peers = useRef(new Object()); \n    const otherUserName = useRef(\"\")\n    // 1/1/21 test\n\n    useEffect(() => {\n\n        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(MediaStream => {\n            userVideo.current.srcObject = MediaStream;\n            userStream.current = MediaStream;\n\n            socketRef.current = io.connect(\"/\");\n            // console.log(socketRef.current)\n\n            \n            // 1/3/21\n            socketRef.current.emit(\"send name\", props.user)\n            socketRef.current.on(\"receive name\", userName => {\n                otherUserName.current = userName\n                setOn('on');\n            })\n            // 1/3/21\n            \n            socketRef.current.emit(\"join room\", props.match.params.roomID);\n            \n            // has the socket emit this event, this event is caught by the server. I believe there's some \n            // 'long polling' involved. Interesting because the connection happens while this is on localhost 3000\n            // and the server is on 5000  \n\n        \n            // i believe the below code only runs when the events happen, after the above event is emitted\n            // it triggers a slew of events on the server side \n            socketRef.current.on('other user', userID => {\n                callUser(userID);\n                otherUser.current = userID;\n                // console.log('user A is in the room already', userID)\n\n\n                // 1/1/21 test\n                otherUsers.current.push(userID) \n                    // may have to concat in a situation where a user joins \n                    // and there are multiple existing users\n                    // they would have to make a call to each of the existing users\n\n                // otherUsers.current.forEach( (user) => {\n                //     callUser(user)\n                // })\n\n                // 1/1/21 test\n            });\n\n            // the above event is emitted from the server back to the client who created a chatroom, it basically \n            // it basically says to the user, hey there's someone in this room \n            // likely whats happening is someone clicked on a room link and this component mounts and they're alerted\n            // that there's another user, and also given the other users socket id \n            // so if the above happens then two users are sitting in the same room. \n            // but their sockets need to connect \n            // this i where the callUser function comes in. Essentially it calls the OTHER USER  \n\n            socketRef.current.on(\"user joined\", userID => {\n\n                otherUser.current = userID;\n\n                // 1/1/21 test\n                otherUsers.current.push(userID)\n                // this may not need concat because it should only\n                // be one user being added at a time \n                // this is from the perspective of existing users in the room \n                // 1/1/21 test\n\n                // console.log('other user joined room')\n            });\n\n            socketRef.current.emit(\"user joined\", userID => {\n                otherUser.current = userID;\n                // console.log('user B just joined the room', userID)\n\n            });\n            \n\n\n            //!TEST - WL - trying to remove video on meeting exit\n            socketRef.current.on( \"user left\", id => {\n                const peerObj = peerRef.current.find(p => p.peerID === id);\n                if (peerObj){\n                    peerObj.peer.destroy();\n                }\n                const peers = peerRef.current.filter(p => p.peerID !== id);\n                peerRef.current = peers;\n                setPeers(peers); //state\n                \n            })\n            // finding the peer, destorying the peer, and removing it from the array\n            // socketRef.current.on(\"disconnect\", () => {\n            //     console.log('dIsCoNnEcTeD')\n                \n            // });\n\n            // socketRef.current.on( \"user-disconnected\", room => {\n            //     console.log('room', room)\n                // const peerObj = peerRef.current.find(p => p.peerID === id);\n                // if (peerObj){\n                //     peerObj.peer.destroy();\n                // }\n                // const peers = peerRef.current.filter(p => p.peerID !== id);\n                // peerRef.current = peers;\n                // setPeers(peers); //state\n\n            // })\n            //finding the peer, destorying the peer, and removing it from the array\n            //!TEST\n\n            socketRef.current.on(\"offer\", handleRecieveCall);\n\n            socketRef.current.on(\"answer\", handleAnswer);\n\n            socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n\n            // 1/1/21 test\n            socketRef.current.on(\"killconnection\", killIt);\n            // 1/1/21 test\n        });\n\n    }, []);\n\n  \n\n    function callUser(userID) {\n        peerRef.current = createPeer(userID); \n        // userID is the socket.id of the OTHER PERSON in the room \n        // it is used in the createPeer function and set to the peerRef hook  \n        userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n        //giving our peer individual access to our stream so they can view on their end\n    }\n\n\n        // 1/1/21 test\n            // peerRef.current = {};\n            // peerRef.current[userID] = createPeer(userID)\n        // 1/1/21 test\n    // }   \n    // userStream.current was set to the MediaStream above\n    // i imagine i\n\n    function createPeer(userID) {\n        const peer = new RTCPeerConnection({\n            iceServers: [\n                {\n                    urls: \"stun:stun.stunprotocol.org\"\n                },\n                {\n                    urls: 'turn:numb.viagenie.ca',\n                    credential: 'muazkh',\n                    username: 'webrtc@live.com'\n                },\n            ]\n        }); \n        // this constructor takes in an array of objects, these objects are servers which allow peers to connect, should \n        // use your own, look into creating one \n\n        peer.onicecandidate = handleICECandidateEvent;\n        peer.ontrack = handleTrackEvent;\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n        return peer;\n\n        // still in the process of calling the other user/ connecting to the other users socket \n        //starts off by instantiating a RTCPeerConnection, this is used to connect two peers and maintain the connection\n\n    }\n\n    function handleNegotiationNeededEvent(userID) {\n        peerRef.current.createOffer().then(offer => { // createOffer is a RTCPeerConnection method\n            return peerRef.current.setLocalDescription(offer);\n        }).then(() => {\n            const payload = {\n                target: userID,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            };\n            socketRef.current.emit(\"offer\", payload);\n        }).catch(e => console.log(e));\n    }\n\n    function handleRecieveCall(incoming) {\n        peerRef.current = createPeer();\n        const desc = new RTCSessionDescription(incoming.sdp);\n        peerRef.current.setRemoteDescription(desc).then(() => {\n            userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n        }).then(() => {\n            return peerRef.current.createAnswer();\n        }).then(answer => {\n            return peerRef.current.setLocalDescription(answer);\n        }).then(() => {\n            const payload = {\n                target: incoming.caller,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            }\n            socketRef.current.emit(\"answer\", payload);\n        })\n    } // this function is handling events related to someone calling the user \n\n    function handleAnswer(message) {\n        const desc = new RTCSessionDescription(message.sdp);\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n    } \n\n    // this handles answers both for the caller and the callee because it essentially to establish the connection it needs to \n\n    function handleICECandidateEvent(e) {\n        if (e.candidate) { // is e.candidate the current user / client \n            const payload = {\n                target: otherUser.current,\n                candidate: e.candidate, // this e.candidate is like a ICE config used to establish an RTCPeerConnection\n            }\n            socketRef.current.emit(\"ice-candidate\", payload);\n        }\n    }\n\n    function handleNewICECandidateMsg(incoming) { // incoming maybe whoever is calling \n        const candidate = new RTCIceCandidate(incoming);\n\n        peerRef.current.addIceCandidate(candidate) \n            .catch(e => console.log(e));\n    } // one perspective is from the user you're calling, the other user. Adds this icecandidate to it's peerRef as a key value pair? \n\n    function handleTrackEvent(e) {\n        partnerVideo.current.srcObject = e.streams[0];\n\n    }; // creating a video for the person you're calling? \n\n\n    // function hangUp(e) {\n    //     console.log(peerRef.current)\n    //     console.log(socketRef.current)\n    //     console.log(\"make this hangup button\")\n    //     socketRef.current.emit(\"hang up\")\n    //     console.log(userVideo.current)\n    //     let vid = document.getElementById(\"myVideo\")\n    //     vid.parentNode.removeChild(vid);\n    //     console.log('final step?')\n    // };\n\n\n\n    //cuts connection when user leaves page\n    useEffect(() => {\n        return () => {\n            stopStreamedVideo()\n        }\n    },[])\n\n    \n\n    //! VIDEO function\n    const playStop = () => {\n        let enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n        if(enabled){\n            userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n            // console.log('false', enabled)\n            setVideo('Video On')\n        }else{\n            userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n            // console.log('true', enabled)\n            setVideo('Video Off')\n        }\n    }\n\n    //! Cut connection of the person leaving page - media stream only.\n    const stopStreamedVideo = () => {\n        const tracks = userStream.current.getTracks();\n        // console.log(tracks);\n        \n        //!TEST - WL  - Intent here is the black the screen whenever some oneleaves\n        // let enabled = userVideo.current.srcObject.getVideoTracks()[0].enabled;\n        // if(enabled){\n        //     userVideo.current.srcObject.getVideoTracks()[0].enabled = false;\n        // }\n        //!TEST\n        // userVideo.current.srcObject.getVideoTracks()[0].enabled = true;\n\n        //note - stream.stop() is deprecated. Do not use\n        tracks.forEach(function(track) {\n            track.stop();\n            \n        });\n        //! @TOM FYI ADDING IT TO THIS BUTTON\n        testFeatures()\n        // props.history.goBack()\n        // console.log(props.history)\n    }\n\n\n    //! MUTE function\n    const muteStream = () => {\n        const enabled = userVideo.current.srcObject.getAudioTracks()[0].enabled;\n        if(enabled){\n            userVideo.current.srcObject.getAudioTracks()[0].enabled = false;\n            setMute('Unmute')\n            // console.log('false', enabled)\n            // console.log(peerRef)\n            // console.log(peerRef.current)\n            // console.log(userStream)\n            // console.log(userStream.current)\n            \n            // console.log(props.history)\n\n        }else {\n            userVideo.current.srcObject.getAudioTracks()[0].enabled = true;\n            // console.log('true', enabled)\n            setMute('Mute')\n            // console.log(props)\n\n        }\n    }\n    \n    // function muteStream() {\n    //     const tracks = userStream.current.getAudioTracks();\n    //     //note - stream.stop() is deprecated. Do not use\n    //     console.log('audio', tracks)\n    //     tracks.forEach(function(track) {\n    //         track.stop();\n    //     });\n    //     console.log('audio', tracks)\n\n    // }\n    const hangUpButton = () => {\n        onLeave();\n    }\n\n    function onLeave() {\n        userVideo.current.srcObject = null;\n        partnerVideo.current.srcObject = null;\n        peerRef.current.close();\n        peerRef.current.onicecandidate = null;\n        peerRef.current.onaddstream = null;\n        createPeer()\n    };\n\n    // 1/1/21 test\n      const killIt = () => {\n        peerRef.current.close()\n    }\n    // 1/1/21 test\n\n    const testFeatures = () => {\n        // peerRef.current.close(); // works but only if there is a peerRef (only if a connection has been established)\n        //!@TOM added this conditional for your above comment\n        if (peerRef.current){\n            socketRef.current.emit(\"hangUp\", otherUser.current)\n            peerRef.current.close()\n\n        }\n\n    }\n    \n   \n    \n    return (\n        <div className='room_container'>\n            {/* button below now functions with leave meeting */}\n            {/* <button onClick={() => testFeatures()}>Test Button</button> */}\n\n            <div className=\"main\">\n                        <div className=\"video_titles\">\n                            <h1 className=\"title\">{props.user}</h1>\n                            <h1 className=\"title\">{otherUserName.current}</h1>\n                        </div>\n                <div className=\"main_videos\">\n                    <div id=\"video-grid\">\n                        <div>\n                            <video id=\"myVideo\" autoPlay ref={userVideo} muted/>\n                        </div>\n                        <div>\n                            <video autoPlay ref={partnerVideo} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"main_controls_container\">\n                    <div className='main_controls'>\n                        <div>\n                            <button onClick={() => muteStream()}>{mute}</button> \n                            <button onClick={() => playStop()}>{video}</button>  \n                        </div>\n                        <div>\n                            <Link to='/'>\n                                <button onClick={() => stopStreamedVideo()}>Leave Meeting</button>  \n                            </Link>\n\n                        </div>\n                    </div>\n                </div>   \n            </div>\n\n        </div>\n    );\n};\n\nexport default Room;","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/questions_errors_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/session_errors_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/questions_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/responses_errors_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/profile_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/responses_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/user_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/reducers/messages_reducer.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/actions/questions_actions.js",["252"],"import * as QuestionsAPIUtil from \"../util/questions_api_util\"\n\nexport const RECEIVE_QUESTIONS = \"RECEIVE_QUESTIONS\";\nexport const RECEIVE_PROFILE_QUESTIONS = \"RECEIVE_PROFILE_QUESTIONS\";\nexport const RECEIVE_QUESTION = \"RECEIVE_QUESTION\"\nexport const REMOVE_QUESTION = \"REMOVE_QUESTION\"\nexport const RECEIVE_ERRORS = \"RECEIVE_ERRORS\"\n\n\n\nexport const RECEIVE_RESPONSE = 'RECEIVE_RESPONSE';\nexport const receiveResponse = (response) => {\n    return {\n        type: RECEIVE_RESPONSE,\n        response\n    }\n}\n\nconst receiveProfileQuestions = (questions) => {\n    return {\n        type: RECEIVE_PROFILE_QUESTIONS,\n        questions // ES6 synthax = questions: questions \n    }\n}\n\nconst receiveQuestions = (questions) => {\n    return {\n        type: RECEIVE_QUESTIONS, \n        questions // ES6 synthax = questions: questions \n    }\n}\n\nconst receiveQuestion = (question) => {\n    return {\n        type: RECEIVE_QUESTION, \n        question\n    }\n}\n\nconst removeQuestion = (question) => {\n    return {\n        type: REMOVE_QUESTION,\n        question \n    }\n} \n// model action should find the question by it's id and delete it, but return the question in case we need to remove it \n// from the state\n\nconst receiveQuestionErrors = (errors) => {\n    return {\n        type: RECEIVE_ERRORS, \n        errors \n    }\n}\n\nexport const fetchQuestions = () => (dispatch) => {\n    return QuestionsAPIUtil.fetchQuestions()\n        .then( res => { dispatch(receiveQuestions(res.data)) } )\n        .catch(err => dispatch(receiveQuestionErrors(err)))\n}\n\n//!TEST\n// export const fetchProfileQuestions = (questions) => (dispatch) => {\n//     return QuestionsAPIUtil.fetchQuestions(questions)\n//         .then(res => dispatch(receiveProfileQuestions(res.data)))\n//         .catch(err => dispatch(receiveQuestionErrors(err)))\n// }\nexport const fetchProfileQuestions = () => (dispatch) => {\n    return QuestionsAPIUtil.fetchQuestions()\n        .then(res => dispatch(receiveProfileQuestions(res.data)))\n        .catch(err => dispatch(receiveQuestionErrors(err)))\n}\n\n//!TEST\n\nexport const fetchQuestion = (questionId) => (dispatch) => {\n    return QuestionsAPIUtil.fetchQuestion(questionId)\n        .then(res => ( dispatch(receiveQuestion(res.data)), dispatch(receiveResponse(res.data.responses))))\n        .catch(err => (dispatch(receiveQuestionErrors(err))))\n}\n\nexport const postQuestion = (newQuestion) => (dispatch) => {\n    return QuestionsAPIUtil.postQuestion(newQuestion)\n        .then( res => { dispatch(receiveQuestion(res.data)) })\n        .catch( errors => { dispatch(receiveQuestionErrors(errors.response.data)) })\n}\n\n\nexport const updateQuestion = (questionId, questionUpdates) => (dispatch) =>{\n    return QuestionsAPIUtil.updateQuestion(questionId, questionUpdates)\n        .then( res => { dispatch(receiveQuestion(res.data))})\n        .catch(err => dispatch(receiveQuestionErrors(err)))\n}\n\nexport const deleteQuestion = (questionId) => (dispatch) => {\n    return QuestionsAPIUtil.deleteQuestion(questionId)\n        .then( res => { dispatch(removeQuestion(res.data)) })\n        .catch(err => dispatch(receiveQuestionErrors(err)))\n}\n\n","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/bulletin_board/bulletin_board.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/question_show.js",["253"],"import React from 'react' \nimport UpdateQuestionForm from './update_question_form_container'\nimport CreateQuestionFormContainer from '../question/create_question_form_container'\nimport CreateRoom from '../chatroom/create_room'\n\nimport {Link} from 'react-router-dom'\nimport AnswerIndexContainer from '../answer/answer_index_container'\nimport AnswerIndexItemContainer from '../answer/answer_index_item_container'\nimport CreateAnswersFormContainer from '../answer/create_answers_form_container'\n\n\n\n\n\nclass QuestionShow extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            users: []\n        }\n        this.updateQuestion = this.props.updateQuestion.bind(this)\n        this.deleteQuestion = this.props.deleteQuestion.bind(this)\n    }\n\n    componentDidMount(){\n\n        this.props.fetchQuestion(this.props.questionId)\n    }\n    \n    isEmpty(obj){\n        return Object.keys(obj).length === 0\n    }\n\n    \n\n    render(){\n        \n        const question = Object.values(this.props.question)\n        if(this.isEmpty(this.props.question) === true){\n            return(\n                <div></div>\n            )\n        }else{\n            const update = () => {\n                if(question[0].user._id === this.props.userId){\n                    return(\n                        <div>\n                            <UpdateQuestionForm \n                                questionId = {question[0]._id}\n                                subject = {question[0].subject}\n                                content = {question[0].content}\n                                tag = {question[0].tag}\n                                solved = {question[0].solved}\n                                user = {question[0].user._id}\n                            />\n                        </div>\n                    )\n                }else{\n                    // console.log('you are not the owner of this question')\n                }\n            }\n\n            const deleteQuestion = () => {\n                if (question[0].user._id === this.props.userId) {\n                    return(\n                    \n                       <div className =\"delete-question-container\">\n                        <Link to=\"/bulletin\">\n                        <button className = \"delete-question-btn\" onClick={() => this.props.deleteQuestion(question[0]._id)}>\n                            \n                                Delete \n                        </button>\n                        </Link>\n\n                        </div>\n                    )\n                }\n            }\n\n            const userResponse = () => {\n                return(\n                question[0].responses.map((response, id) => {\n                    if(response.user._id === this.props.userId){\n                        return(\n                            <div key={id}>\n                                <AnswerIndexItemContainer \n                                    response = {response}\n                                    questionID = {question[0]._id}\n                                    currentUserID = {this.props.userId}\n                                    fetchQuestion = {this.props.fetchQuestion}\n                                   \n                                />\n                            </div>\n                        )                       \n                    }\n                })\n                )\n            }\n            \n            const questionCreatorResponses = () => {\n               \n                if (question[0].responses.length >0) {\n                    \n                    if (question[0].user._id === this.props.userId){\n                    return(\n                        \n                        <div>\n                            <AnswerIndexContainer \n                                responses = {question[0].responses}\n                                questionID = {question[0]._id}\n                                questionSubject = {question[0].subject}\n                                currentUserID = {this.props.userId}\n                                fetchQuestion = {this.props.fetchQuestion}\n                                \n                               \n                            />\n                        </div>\n                    \n                    )\n                }}else{\n                    <div></div>\n                }\n            }\n            \n             const createAnswers = () => {\n                if (question[0].user._id !== this.props.userId) {\n                    return(\n                        \n                    \n                        <div>\n\n                            <CreateAnswersFormContainer \n                                questionID = {question[0]._id}\n                                fetchQuestion = {this.props.fetchQuestion}\n                                \n                            />\n\n                        </div>\n                    \n                    )\n                }\n            }\n            \n            return(\n                < div className=\"question_container\">\n                    <div className=\"question_description\">\n\n                        {/* {console.log(this.state.users)} */}\n                        <div className = \"question_header_container\">\n                            <div className=\"question_header\">\n                                <h2>{question[0].subject}</h2>\n                                <p className=\"date_posted\">posted: {Date(question[0].createdAt)}</p>\n                            </div>\n                            {deleteQuestion()}\n\n                        </div>\n                         <div className=\"question_body\">\n                             <p>{question[0].content}</p>\n\n                        </div>   \n\n                    <div className=\"question_footer\">\n                        <div className=\"footer-status\">\n                        { question[0].solved ? <p ><span className=\"checkIcon\">&#10003;</span> Solved</p> : <p><span className=\"xIcon\">&#10007;</span> Unsolved</p> }\n                         <p className=\"tag\">Tag: {question[0].tag}</p>\n                        </div>\n                        <div className=\"footer-author\">\n                         <img className = \"question-show-author-image\" alt=\"robots\" src={`https://robohash.org/${question[0].user._id}?100x100`} />\n                          <h1 className=\"question-author\"> posted by {question[0].user.username}</h1>\n\n                        </div>\n\n\n                        </div>\n                    \n\n                    </div>\n                        <CreateRoom />\n                    {update()}\n                    \n\n                    {userResponse()}\n                    {questionCreatorResponses()}\n\n\n                    {createAnswers()}\n\n\n                    <div className= \"show_createform_container\">\n                        <CreateQuestionFormContainer />\n                    </div>\n                   \n                </div>\n            )\n        }\n    }\n}\n\nexport default QuestionShow","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/session/login_form.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/session/signup_form.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/resolved/resolved_show.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/profile/profile.js",["254","255"],"import React from 'react';\n// import CreateQuestionFormContainer from '../question/create_question_form_container'\nimport { Link } from 'react-router-dom'\nimport '../../assets/stylesheets/profile.scss';\n\n\nclass Profile extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.caseResolved = this.caseResolved.bind(this);\n    }\n\n\n    componentDidMount() {\n        // console.log(this.props.currentUser.questions)\n        this.props.fetchProfileQuestions(this.props.currentUser.questions)\n        this.props.fetchUser();\n    }\n\n\n    caseResolved(bool) {\n        if (bool === 'false') {\n            return (\n                <div className='bool_info'>\n                    False\n                </div>\n            )\n        } else {\n            return (\n                <div className='bool_info2'>\n                    True\n                </div>\n            )\n        }\n    }\n\n\n    render() {\n        // let boolean = false;\n        let userID = this.props.currentUser.id; \n        let amtOfPost = 0;\n        let amtOfResponse = 0;\n        let responses = []; \n        let questions = []; \n\n        this.props.currentUser.questions.forEach( (question) => {\n            if(question.user === userID) {\n                questions.push(question)\n            } else {\n                responses.push(question)\n            }\n        });\n\n\n        const profile_questions = () => {\n            \n            if(questions.length > 0){\n                amtOfPost = questions.length;\n                return(\n\n                    questions.map((question, id) => {\n\n                        if(question.user === userID) {\n\n                            return (\n                                <div key={id} className='questions_topic'>\n                                    <div className='individual_case'>\n                                            <label>\n                                                <Link to={`/question/${question._id}`} className='question_topic_link'>\n                                                <div className='sub_label'>Case Id: </div>\n                                                    <div className='actual_info'>{question._id}</div>\n                                                </Link>\n                                            </label>\n                                            <label>\n                                                <div className='sub_label'>Subject:</div>\n                                                <div className='actual_info'>{question.subject}</div>\n                                            </label>\n                                            <label>\n                                                <div className='sub_label'>Case Closed: </div>\n                                                {question.solved ? this.caseResolved('true') : this.caseResolved('false')}\n                                            </label>\n                                    </div>\n                                </div>\n                            )\n                            \n                        }\n\n                    })\n                )\n            }\n        }\n\n\n\n        const profile_responses = () => {\n\n            if(responses.length > 0 ) {\n                amtOfResponse = responses.length\n                return (\n                    responses.map((question, id) => {\n\n                        return question.responses.map(response => {\n\n                            if(response.user === userID) {\n                                return(\n                                    <div key={id} className='questions_topic'>\n                                        <div className='individual_case'>\n                                            <label>\n                                                <Link to={`/question/${question._id}`} className='question_topic_link'>\n                                                    <div className='sub_label'>Relating to Case Id:</div>\n                                                    <div className='actual_info'>{question._id}</div>\n                                                </Link>\n                                            </label>\n                                            <label>\n                                                <div className='sub_label'>Response:</div>\n                                                <div className='actual_info_response'>{response.answer}</div>\n                                            </label>\n                                        </div>\n                                    </div>  \n                                )\n                            }\n\n                        })\n                    }\n                    )\n            \n            )}\n        }\n    \n        return (\n            <div className='profile_container'>\n\n                <div className=\"created_post_info\">\n                    <div className=\"created_post_title\">Created Posts:</div>\n\n                    {profile_questions()}\n\n                    <div className=\"responed_post_title\">Response to Posts:</div>\n\n                    {profile_responses()}\n\n                </div>\n\n                <div className=\"user_profile_info\">\n                    <div className='profile_name'>{this.props.currentUser.username}'s Profile</div>\n                    <img alt=\"robots\" src={`https://robohash.org/${userID}?100x100`} className='roboImgApi' />\n\n                    <div className='profile_post_amt'>Number of Posts: {amtOfPost}</div>\n                    <div className='profile_reponse_amt'>Response to Posts: {amtOfResponse}</div>\n                </div>\n\n\n            </div>\n\n        )\n    }\n}\n\nexport default Profile;","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/nav/navbar.js",["256","257","258","259","260"],"import React from 'react';\nimport { Link } from 'react-router-dom'\nimport '../../assets/stylesheets/reset.css';\nimport '../../assets/stylesheets/navbar.scss';\nimport dino2 from '../../assets/images/dino2.png';\nimport linkedin from '../../assets/images/linkedin.png';\nimport messageImg from '../../assets/images/chat.png'\n\n//!{/* //!WL 1/19/ trying to kill chat connection */}\nimport MessengerContainer from '../messenger/messenger_container'\n//!{/* //!WL 1/19/ trying to kill chat connection */}\n\nclass NavBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.logoutUser = this.logoutUser.bind(this);\n        this.getLinks = this.getLinks.bind(this);\n\n        // console.log('18', this.props.currentUser)\n\n        //!{/* //!WL 1/19/ trying to kill chat connection */}\n            this.state = {\n                // showComponent: false,\n                chats: []\n                \n            }\n            this.openChat = this.openChat.bind(this);\n            // this.chatItself = this.chatItself.bind(this);\n            this.leaveChat = this.leaveChat.bind(this)\n        //!{/* //!WL 1/19/ trying to kill chat connection */}\n    }\n    \n\n    componentDidMount() {\n        this.props.fetchUser()\n    }\n\n    componentDidUpdate(prevState, b) {\n        // if (prevState.currentUser.questions.length != this.props.currentUser.questions.length) {\n        //     console.log('updating')\n        //     this.props.fetchUser()\n        // }\n    }\n\n    logoutUser(e) {\n        e.preventDefault();\n        //!TEST\n\n        let chatArr = [...this.state.chats];\n        \n        if(chatArr.length > 0 ){\n            console.log(this.state.chats)\n            for(let i = 0; i < chatArr.length; i ++){\n                this.leaveChat(chatArr[i])\n            }\n\n        }\n        \n        //!TEST\n        this.setState({\n            chats: []\n        })\n        console.log(this.state.chats)\n        // console.log(this.state.chats)\n        this.props.logout();\n    }\n\n    // Selectively render links dependent on whether the user is logged in\n    getLinks() {\n        if (this.props.loggedIn) {\n            return (\n                <div className='lefty'>\n                    <button onClick={this.logoutUser} className='logoutButton'>Logout</button>\n                    <Link to={'/profile'} className='profileButton'>Profile</Link>\n                </div>\n            );\n        } else {\n            return (\n                <div className='right-navbar'>\n                    <Link to={'/login'} className='signinButton'>Sign in</Link>\n                    <Link to={'/signup'} className='signupButton'>TRY FOR FREE</Link>\n                </div>\n            );\n        }\n    }\n//!{/* //!WL 1/19/ trying to kill chat connection */}\n    openChat(chat){\n\n        console.log(chat)\n\n        let chatsArray = this.state.chats\n\n        if (!chatsArray.includes(chat)){\n            if(chatsArray.length >= 3){\n                let closeChat = chatsArray.shift();\n                \n                console.log('remove',closeChat);\n\n                let leaveButton = document.getElementById(`leaveChat${closeChat._id}`)\n                leaveButton.click()\n                // delete chatsArray[chatsArray.indexOf(closeChat)]\n                // chatsArray.splice(chatsArray.indexOf(chat), 1)\n            }\n\n            chatsArray.push(chat)\n            this.setState({chats: chatsArray})\n        }\n        // console.log(chatsArray)\n        // this.setState({chats: chatsArray})\n        // console.log('all', this.state.chats)\n\n    }\n\n    // openChat(chat){\n    //         let chatsArray = this.state.chats\n    //     if (!chatsArray.includes(chat)){\n    //         chatsArray.push(chat)\n    //     }\n    //     console.log(chatsArray)\n    //         this.setState({chats: chatsArray})\n\n    // }\n\n    leaveChat(chat){ \n        let leaveButton = document.getElementById(`leaveChat${chat._id}`)\n        // console.log(leaveButton)\n        leaveButton.click()\n        let chatsArray = this.state.chats\n        // console.log(chatsArray[0])\n        // delete chatsArray[chatsArray.indexOf(chat)]\n        chatsArray.splice(chatsArray.indexOf(chat), 1)\n        console.log(chatsArray)\n\n        this.setState({chats: chatsArray})\n    }\n\n    isEmpty(currentUser) {\n        return Object.values(currentUser).length === 0 \n    }\n\n\n    // chatItself(){\n    //     // console.log('state', this.state.chatID)\n    //     if(this.state.chatID === ''){\n    //         return null\n    //     }else{\n    //         return(\n    //             <div>\n    //                 <MessengerContainer chatID={this.state.chatID}/>\n    //             </div>\n    //         )\n\n    //     }\n    // }\n//!{/* //!WL 1/19/ trying to kill chat connection */}\n    render() {\n        const tbdevelopedHeader = () => {\n            if(this.props.loggedIn === false){\n                return(\n                    <Link to='/'><h1>TBDeveloped</h1></Link>\n                )\n            }else{\n                return (\n                    <Link to='/bulletin'><h1>TBDeveloped</h1></Link>\n                )\n            }\n        }\n        \n        \n        return (\n\n\n            <div className='navbar-container'>\n                <div className='nav-header-bar'>\n                    <div className='left-navbar'>\n\n                        \n                        <Link to='/'><img alt=\"\" src={dino2} className='brand-icon'/></Link>\n                        <div className='brand-navbar'>{tbdevelopedHeader()}</div>\n\n\n                        \n                        <div className='team-navbar'>About\n                            <div className='team-container'>\n                                <div className='teamInfo-navbar'>\n                                    <div className='teamInfo-group'>\n                                        <div className='individual-member'>\n                                            <a href='https://www.linkedin.com/in/oliverlopez23/' className='linked_a'>\n                                                <img alt=\"\" src={linkedin} className='linkedin-icon'/>\n                                                <div className='person_name'>Oliver Lopez</div>\n                                            </a>    \n                                        </div>\n                                        <div className='individual-member'>\n                                            <a href='https://www.linkedin.com/in/shanesharareh/' className='linked_a'>\n                                                <img alt=\"\" src={linkedin} className='linkedin-icon'/>\n                                                <div className='person_name'>Shane Sharareh</div>\n                                            </a>    \n                                        </div>\n                                        <div className='individual-member'>\n                                            <a href='https://www.linkedin.com/in/thomas-cheung-38953034/' className='linked_a'>\n                                                <img alt=\"\" src={linkedin} className='linkedin-icon'/>\n                                                <div className='person_name'>Thomas Cheung</div>\n                                            </a>  \n                                        </div>\n                                        <div className='individual-member'>\n                                          <a href='https://www.linkedin.com/in/william-leung-60589a73/' className='linked_a'>\n                                                <img alt=\"\" src={linkedin} className='linkedin-icon'/>\n                                                <div className='person_name'>William Leung</div>\n                                            </a>  \n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div> \n\n                    </div>\n\n                    \n                    <div >\n\n                        { !this.isEmpty(this.props.currentUser) ? \n\n                        <div> \n                        {this.props.currentUser.activeChats.length > 0 ? \n                        <div>\n                            <div className='chatDropdown'> \n\n\n                            \n                            <img src={messageImg} className='messageImg'/>\n                        <ul className='chatList'>\n                            {this.props.currentUser.activeChats.map((chat) => {\n                            \n                                return (\n                                    <div className='chat_list_items' onClick={() => this.openChat(chat)}>   \n                                        {/* {console.log(chat)} */}\n                                        <img src={`https://robohash.org/${this.props.currentUser.id === chat.posterID._id ? chat.responderID._id : chat.posterID._id }?100x100`} \n                                        className='robotNav' />\n                                        \n                                        <li className=\"chat_list_li\">\n                                            {this.props.currentUser.id === chat.posterID._id ? \n                                            `${chat.responderID.username} - ${chat.questionSubject.substring(0, 15)}` \n                                            : \n                                            `${chat.posterID.username} - ${chat.questionSubject.substring(0, 15)}`}\n                                    \n                                        </li>\n                                            \n                                            {/* {this.chatItself()} */}\n\n\n                                    </div>\n                                )\n                            \n                            \n                        })}\n\n                                \n            \n                                    \n                            </ul>\n                            </div>\n                            <div className='chats'>\n                                {this.state.chats.map(chat => {\n                                    return(\n                                        <div className='chatContainer'>\n                                        \n                                            <div> \n                                                <div className='test' > \n                                                    <button onClick={() => this.leaveChat(chat)} className='leaveChat' >X</button>\n\n                                                    <div className='test2'> \n                                                        <marquee behavior=\"scroll\" direction=\"left\" scrollamount=\"3\">\n                                                        <div className='otherTest'> \n                                                            <img src={`https://robohash.org/${this.props.currentUser.id === chat.posterID._id ? chat.responderID._id : chat.posterID._id}?100x100`}\n                                                                className='robotChat' />\n                                                                \n\n                                                            {this.props.currentUser.id === chat.posterID._id ?\n                                                                `${chat.responderID.username}-${chat.questionSubject}`\n                                                                :\n                                                                `${chat.posterID.username}-${chat.questionSubject}`}\n                                                                \n                                                        </div>\n                                                    \n                                                        </marquee>\n                                            \n                                                    </div>\n                                                </div>\n                                                <div>\n                                                <MessengerContainer chatID={chat._id} />\n                                                </div>\n                                            </div>\n\n                                      </div>\n                                    )\n                                })}\n                            </div>\n                        </div>\n\n                        :   <div className='chatDropdown'> \n                                <img src={messageImg} className='messageImg'/>\n                                <div className='chatList'> No Active Chats!</div>\n                            </div>\n\n                    \n                    }\n                    </div>\n                    : null\n                    }\n                        \n                        \n                    </div>\n\n                    <div>{ this.getLinks()}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/actions/responses_actions.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/actions/messages_actions.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/questions_api_util.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/question_index.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/create_question_form_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/resolved/resolved_index.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/update_question_form_container.js",["261"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport { updateQuestion } from '../../actions/questions_actions'\nimport QuestionForm from './question_form'\n\n\nexport class UpdateQuestionForm extends React.Component {\n\n    constructor(props){\n        super(props)\n    }\n\n    componentDidMount() {\n        this.props.receiveReview(this.props.reviewId)\n    }\n\n    render() {\n       const {questionId, subject, content, tag, solved, user} = this.props\n        return (\n            <QuestionForm  \n                questionId = {questionId}\n                subject={subject}\n                content={content}\n                tag={tag}\n                solved={solved}\n                user={user}\n                \n            />\n        );\n    }\n}\n\n\n\nconst mapStateToProps = (state) => {\n    \n    return ({ formType: 'Update Question!', errors: state.errors.questions}\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    processForm: (questionId, questionUpdates) => dispatch(updateQuestion(questionId, questionUpdates))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionForm)","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/chatroom/create_room.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_index_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_index_item_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/create_answers_form_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/messenger/messenger_container.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/responses_api_util.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/util/messages_api_util.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/question/question_form.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/messenger/messenger.js",["262","263","264","265"],"import { use } from 'passport';\nimport React, {useState, useEffect, useRef} from 'react'\nimport io from 'socket.io-client'\nimport '../../assets/stylesheets/chat.css'\n\n\nconst Messenger = (props) => {\n    const [yourID, setYourID] = useState();\n    // const [conversations, setConversations] = useState([]);\n    const [conversations, setConversations] = useState([]);\n    //! \n        // const\n    //!\n    const [message, setMessage] = useState(\"\");\n\n    const socketRef = useRef();\n    let messages = document.querySelector('.messages')\n\n\n\n    useEffect(() => {\n        socketRef.current = io.connect('/');\n\n        socketRef.current.on(\"your id\", id => {\n            setYourID(id);\n        })\n        // console.log(yourID)\n\n        socketRef.current.on(\"message\", (message) => {\n            console.log('here')\n            receivedMessage(message);\n\n\n        })\n        \n        // console.log('messenger-31', props.chatID)\n        socketRef.current.emit('join', props.chatID)\n\n    }, [props.chatID]);\n\n    function receivedMessage(message) {\n        // console.log('socketio@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')\n        setConversations(oldMsgs => [...oldMsgs, message]);        \n    }\n\n    function sendMessage(e) {\n        e.preventDefault();\n        const messageObject = {\n            sentence: message,\n            id: yourID,\n            user: props.userID,\n            username: props.username\n        };\n        messageToDB()\n        setMessage(\"\");\n        socketRef.current.emit(\"send message\", messageObject);\n        \n    }\n    \n\n    function handleChange(e) {\n        setMessage(e.target.value);\n        console.log(message)\n    }\n\n    function messageToDB(){\n\n        let newMess = {\n            chatId: props.chatID,\n            user: props.userID,\n            sentence: message\n        };\n\n        props.postMessage(newMess);\n    }\n\n    //!{/* //!WL 1/19/ trying to kill chat connection */}\n    function leaveChat(){\n        socketRef.current.disconnect()\n    }\n    //!{/* //!WL 1/19/ trying to kill chat connection */}\n\n    \n    //!renders DB Conversations\n    useEffect(() => {\n        // if(props.chatID.messages.length !== conversations.length){\n        if(props.chatID){\n            props.fetchChat(props.chatID).then(res =>{\n                // console.log(res.chat.posterID)\n                setConversations(res.chat.messages)\n            })\n            \n        }\n\n    }, [props.chatID])\n\n    useEffect(() => {\n        \n        if (messages) {\n            messages.scrollTop = messages.scrollHeight\n        }\n    }, [conversations])\n    //!renders DB Conversations\n    // console.log(messages)\n\n    if(messages){\n        messages.scrollTop = messages.scrollHeight\n    }\n    function posterValid(){\n        // if(poster){\n        //     if (props.userID === poster._id){\n        //         return(\n        //             <div>\n        //                { console.log(poster)}\n                        \n        //                 <img src={`https://robohash.org/${ responder._id}?100x100`}className='robotNav' />\n        //                 <div>{`${responder.username}-${questionSubject.substring(0, 15)}`}</div>\n        //             </div>\n        //         )\n        //     }else{\n        //         return (\n        //             <div>\n        //                 <img src={`https://robohash.org/${poster._id}?100x100`} className='robotNav' />\n        //                 <div>{`${poster.username}-${questionSubject.substring(0, 15)}`}</div>\n        //             </div>\n        //         )\n        //     }\n        // }else{\n        //    return null\n        // }\n    }\n\n    //!TESTS\n    \n    // function onKeyUpValue(e) {\n    //     e.preventDefault();\n    //     if(message === ''){\n    //         console.log('null')\n    //         return null\n    //     }else if (e.code===\"Enter\" && message !== ''){\n    //         console.log('submited')\n    //         sendMessage(e)\n    //     }\n    // }\n\n    //!TEST\n\n    \n    return (\n        <div>\n            \n        <div className='chatBox'>\n\n            <div onClick={() => leaveChat()} id={`leaveChat${props.chatID}`}></div> \n            <div className='messages' >\n                {/* {console.log(conversations)} */}\n                 {/* {console.log(conversations)}   */}\n                {conversations.map((message, index) => {\n                    \n                    if (message.user === props.userID) {\n                        // console.log(yourID)\n                        return (\n                            <div key={index} className='myMessagesRow'>\n                                {/* <div>{props.username}</div> */}\n                                <div className='myMessage'>\n                                    {/* {console.log(message)} */}\n                                    {/* {message.user} */}\n                                    {message.sentence}\n                                </div>\n                            </div>\n                        )\n                    }else{\n                        return (\n                            <div key={index} className='otherMessagesRow'>\n                                <div className='otherMessage'>\n                                    {/* {message.user} */}\n                                    {message.sentence}\n                                </div>\n                            </div>\n                        )\n                    }\n                })}\n            </div>\n\n            \n            <form onSubmit={sendMessage} className='chatForm'>\n                <textarea value={message} className='chatTextArea' onChange={handleChange} placeholder=\"Say something...\" />\n                {message === '' ? <button className='chatSend' type='submit' disabled>Send</button > : <button className='chatSend' id='chatBtn' type='submit'>Send</button> }\n                \n            </form>\n            \n\n        </div>\n        </div>\n\n    );\n            \n            \n};\n\nexport default Messenger","/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_index.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_index_item.js",[],"/home/tomc/TBDeveloped/TBDeveloped/frontend/src/components/answer/answer_form.js",["266","267","268"],"import React from 'react'\n\nimport '../../assets/stylesheets/answer_form.css'\n\n\nclass ResponseForm extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            consultation:'',\n            answer: this.props.answer,\n            errors: \"\"\n        }\n        this.submit = this.submit.bind(this)\n        this.update = this.update.bind(this)\n        \n    }\n\n    update(field){\n        return (e) => this.setState({[field]: e.currentTarget.value})\n    }\n\n    async submit(e){\n\n        e.preventDefault();\n\n        if(this.props.questions.length === 0){\n            let newResponse = {\n                user: this.props.user,\n                consultation: this.state.consultation,\n                answer: this.state.answer\n            };\n\n\n            if (!newResponse.consultation) {\n                this.setState({ errors: \"please pick a consultation date\" })\n            }\n            else if (!newResponse.answer) {\n                this.setState({ errors: \"please write out your response\" })\n            }\n            else {\n                await this.props.processForm(this.props.questionID, newResponse)\n                this.props.fetchQuestion(this.props.questionID)\n                this.props.fetchUser()\n                //clear errors and form fields\n                this.setState({ errors: \"\" })\n                this.setState({ consultation: \"\" })\n                this.setState({ answer: \"\" })\n            }\n        }else{\n        \n        let questionIDs = []     \n        this.props.questions.forEach(async question => {\n            questionIDs.push(question._id)\n            \n        })\n        if(questionIDs.includes( this.props.questionID)) {\n            this.setState({ errors: \"You cannot respond to a question more than once!\" })\n        } else {\n            let newResponse = {\n                user: this.props.user,\n                consultation: this.state.consultation,\n                answer: this.state.answer\n            };\n\n\n            if (!newResponse.consultation) {\n                this.setState({ errors: \"please pick a consultation date\" })\n            }\n            else if (!newResponse.answer) {\n                this.setState({ errors: \"please write out your response\" })\n            }\n            else {\n                await this.props.processForm(this.props.questionID, newResponse)\n                this.props.fetchQuestion(this.props.questionID)\n                this.props.fetchUser()\n                //clear errors and form fields\n                this.setState({ errors: \"\" })\n                this.setState({ consultation: \"\" })\n                this.setState({ answer: \"\" })\n            }\n        }\n        }\n        \n    }\n    // componentWillReceiveProps(nextProps) {\n    //     this.setState({ errors: nextProps.errors })\n    // }\n\n    render(){\n        //   console.log(this.props.currentUser) \n        let n = new Date();\n        function date(){\n            if(n.getMonth() > 9){\n                return `${n.getFullYear()}-${n.getMonth() + 1}-${n.getDate()}`\n            }else{\n                return `${n.getFullYear()}-` + `0`+`${n.getMonth() + 1}-` + `${n.getDate()}`\n\n            }\n        }\n\n        // console.log(date())\n        return(\n            <form className = \"response-form\" onSubmit={this.submit}>\n                <div>\n                    <div className = \"response-answer-container\" >\n                    <p className=\"error_message\">{this.state.errors}</p>\n                    </div>\n                <div className=\"respondant-header\">\n                <img className = \"respondants-image\" alt=\"robots\" src={`https://robohash.org/${this.props.currentUser.id}?100x100`} />\n                <label className = \"consoldation-label\">\n                            Consultation Date: <span className=\"error_message\">*</span> <input className=\"response-date\" type=\"date\" min={date()} value={this.state.consultation} onChange={this.update('consultation')}/>\n                </label>\n                </div>\n                </div>\n                <div>\n                <label>\n                   <textarea className = \"response-text-area\" placeholder=\"Write a Response...\" type='text' value={this.state.answer} onChange={this.update('answer')}/>\n                </label>\n                </div>\n\n                <div>\n                <label>\n                    <button className = \"response-submission-button\" type='submit'>{this.props.formType}</button>\n                </label>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default ResponseForm ",["269","270"],{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","severity":1,"message":"276","line":5,"column":1,"nodeType":"277","endLine":35,"endColumn":2},{"ruleId":"278","severity":1,"message":"279","line":13,"column":14,"nodeType":"280","messageId":"281","endLine":13,"endColumn":19},{"ruleId":"278","severity":1,"message":"282","line":16,"column":15,"nodeType":"280","messageId":"281","endLine":16,"endColumn":22},{"ruleId":"278","severity":1,"message":"283","line":37,"column":11,"nodeType":"280","messageId":"281","endLine":37,"endColumn":22},{"ruleId":"284","severity":1,"message":"285","line":37,"column":32,"nodeType":"286","messageId":"287","endLine":37,"endColumn":43},{"ruleId":"284","severity":1,"message":"285","line":38,"column":31,"nodeType":"286","messageId":"287","endLine":38,"endColumn":42},{"ruleId":"288","severity":1,"message":"289","line":161,"column":8,"nodeType":"290","endLine":161,"endColumn":10,"suggestions":"291"},{"ruleId":"288","severity":1,"message":"292","line":289,"column":7,"nodeType":"290","endLine":289,"endColumn":9,"suggestions":"293"},{"ruleId":"278","severity":1,"message":"294","line":365,"column":11,"nodeType":"280","messageId":"281","endLine":365,"endColumn":23},{"ruleId":"295","severity":1,"message":"296","line":78,"column":59,"nodeType":"297","messageId":"298","endLine":78,"endColumn":60},{"ruleId":"299","severity":1,"message":"300","line":83,"column":58,"nodeType":"301","messageId":"302","endLine":83,"endColumn":60},{"ruleId":"299","severity":1,"message":"300","line":62,"column":50,"nodeType":"301","messageId":"302","endLine":62,"endColumn":52},{"ruleId":"299","severity":1,"message":"300","line":103,"column":64,"nodeType":"301","messageId":"302","endLine":103,"endColumn":66},{"ruleId":"303","severity":1,"message":"304","line":230,"column":29,"nodeType":"305","endLine":230,"endColumn":75},{"ruleId":"303","severity":1,"message":"304","line":237,"column":41,"nodeType":"305","endLine":238,"endColumn":64},{"ruleId":"306","severity":1,"message":"307","line":272,"column":57,"nodeType":"305","endLine":272,"endColumn":118},{"ruleId":"303","severity":1,"message":"304","line":274,"column":61,"nodeType":"305","endLine":275,"endColumn":89},{"ruleId":"303","severity":1,"message":"304","line":301,"column":33,"nodeType":"305","endLine":301,"endColumn":79},{"ruleId":"308","severity":1,"message":"309","line":9,"column":5,"nodeType":"310","messageId":"311","endLine":11,"endColumn":6},{"ruleId":"278","severity":1,"message":"312","line":1,"column":10,"nodeType":"280","messageId":"281","endLine":1,"endColumn":13},{"ruleId":"288","severity":1,"message":"313","line":95,"column":8,"nodeType":"290","endLine":95,"endColumn":22,"suggestions":"314"},{"ruleId":"288","severity":1,"message":"315","line":102,"column":8,"nodeType":"290","endLine":102,"endColumn":23,"suggestions":"316"},{"ruleId":"278","severity":1,"message":"317","line":109,"column":14,"nodeType":"280","messageId":"281","endLine":109,"endColumn":25},{"ruleId":"318","severity":1,"message":"319","line":97,"column":46,"nodeType":"320","messageId":"321","endLine":97,"endColumn":47},{"ruleId":"318","severity":1,"message":"319","line":97,"column":51,"nodeType":"320","messageId":"321","endLine":97,"endColumn":52},{"ruleId":"318","severity":1,"message":"319","line":97,"column":75,"nodeType":"320","messageId":"321","endLine":97,"endColumn":76},{"ruleId":"271","replacedBy":"322"},{"ruleId":"273","replacedBy":"323"},"no-native-reassign",["324"],"no-negated-in-lhs",["325"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-unused-vars","'peers' is assigned a value but never used.","Identifier","unusedVar","'trigger' is assigned a value but never used.","'otherVideos' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'callUser', 'handleRecieveCall', 'props.match.params.roomID', and 'props.user'. Either include them or remove the dependency array.","ArrayExpression",["326"],"React Hook useEffect has a missing dependency: 'stopStreamedVideo'. Either include it or remove the dependency array.",["327"],"'hangUpButton' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'use' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["328"],"React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array.",["329"],"'posterValid' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["324"],["325"],"no-global-assign","no-unsafe-negation",{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},"Update the dependencies array to be: [callUser, handleRecieveCall, props.match.params.roomID, props.user]",{"range":"338","text":"339"},"Update the dependencies array to be: [stopStreamedVideo]",{"range":"340","text":"341"},"Update the dependencies array to be: [props, props.chatID]",{"range":"342","text":"343"},"Update the dependencies array to be: [conversations, messages]",{"range":"344","text":"345"},[5970,5972],"[callUser, handleRecieveCall, props.match.params.roomID, props.user]",[10779,10781],"[stopStreamedVideo]",[2394,2408],"[props, props.chatID]",[2538,2553],"[conversations, messages]"]